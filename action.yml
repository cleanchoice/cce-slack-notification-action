
name: 'cce-slack-notification-action'
author: 'CleanChoice Energy'
description: 'Composite action for Slack notification'
inputs:
  channel:
    description: 'Name or ID of the Slack channel'
    required: true
  status:
    description: 'Custom status as a string'
    required: false
  update_status:
    description: 'Update status'
    required: false
  color:
    description: 'Slack color line'
    required: true
  message_id:
    description: 'Update prev message'
    required: false
outputs:
  message_id:
    description: "ID of message"
    value: ${{ steps.slack.outputs.ts }}
runs:
  using: 'composite'
  steps:
    - name: Convert Slack channel ID to Name
      shell: bash
      run: |
        get_channel_id=$(curl -X GET "https://slack.com/api/conversations.list?limit=1000&pretty=1" \
        -H  "accept: application/x-www-form-urlencoded" \
        -H  "Authorization: Bearer ${{ env.SLACK_BOT_TOKEN }}" | jq -r '.channels[]|select(.name=="'${{ inputs.channel }}'") | .id')
        echo "channel_id=$get_channel_id" >> $GITHUB_ENV
    - name: Get message statuses
      shell: bash
      id: message_statuses
      run: |
        if [ -z ${{ inputs.message_id }} ];then
          echo "Skip multi status update"
        else
          statuses=$(curl -X GET \
          "https://slack.com/api/conversations.history?channel=${{ env.channel_id }}&inclusive=true&latest=${{ inputs.message_id }}&limit=1&pretty=1" \
          -H "Authorization: Bearer ${{ env.SLACK_BOT_TOKEN }}" | jq -r '.messages[].attachments[].fields[]|select(.title=="Status") | .value' | sed '/^$/d')
          echo "multi_status<<EOF" >> $GITHUB_ENV
          echo "$statuses" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
    - name: Set Slack color
      shell: bash
      run: |
        if [[ ${{ inputs.color }} == 'warning' ]]; then
          echo "emoji=:hourglass_flowing_sand:" >> $GITHUB_ENV
        elif [[ ${{ inputs.color }} == 'good' ]]; then
          echo "emoji=:white_check_mark:" >> $GITHUB_ENV
        elif [[ ${{ inputs.color }} == 'danger' ]]; then
          echo "emoji=:red_circle:" >> $GITHUB_ENV
        fi
    - name: Set Statuses
      shell: bash
      id: status
      run: |
        if [ -z ${{ inputs.update_status }} ];then
          for each in $(echo ${{ inputs.status }})
          do
            echo $each
            echo "$each=${{ env.emoji }} $each\n" >> $GITHUB_OUTPUT
          done
        else
          for value in ${{ env.multi_status }}
          do
            echo $value
            echo $value >> statuses.txt
          done
          cat statuses.txt
          pattern=$(cat statuses.txt | grep ${{ inputs.update_status }})
          echo "pattern - " $pattern
          sed -e "s/$pattern/${{ env.emoji }}\ ${{ inputs.update_status }}/" statuses.txt
          cat statuses.txt
          for each in $(cat statuses.txt | cut -d":" -f3 | cut -d" " -f2)
          do
            echo $each
            echo "$each=$(echo $new_statuses | grep $each) \n" >> $GITHUB_OUTPUT
          done
        fi
    - name: Set Timestamp
      shell: bash
      run: echo "timestamp=$(date +%s)" >> $GITHUB_ENV
    - name: Slack Action
      uses: slackapi/slack-github-action@v1
      id: slack
      with:
        channel-id: "${{ env.channel_id }}" 
        update-ts: ${{ inputs.message_id }}
        payload: |
          {
            "text": ":github: Workflow run by: *${{ github.actor }}*",
            "attachments": [
              {
                "color": "${{ inputs.color }}",
                "fields": [
                  {
                    "title": "Repo",
                    "short": true,
                    "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>"
                  },
                  {
                    "title": "Workflow",
                    "short": true,
                    "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>"
                  },
                  {
                    "title": "Status",
                    "value": "${{join(steps.status.outputs.*, '\n')}}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "<https://github.com/${{ github.repository }}/tree/${{ github.head_ref || github.ref_name}}|${{ github.head_ref || github.ref_name}}>",
                    "short": true
                  },
                  {
                    "title": "Event",
                    "value": "<${{ github.event.pull_request.html_url || github.event.head_commit.url }}|${{ github.event_name }}>",
                    "short": true
                  }
                ],
                "footer": "${{ github.repository }}",
                "footer_icon": "https://scontent-arn2-2.xx.fbcdn.net/v/t1.6435-9/69063507_3531984646874690_7772827298843066368_n.png?_nc_cat=100&ccb=1-7&_nc_sid=174925&_nc_ohc=j4iC0WAS7xgAX9dPpIu&_nc_ht=scontent-arn2-2.xx&oh=00_AfBviMf2oRH1PbHc9zspigJu0mhg9zBbbijDX-ra3MtGZA&oe=63B113D2",
                "ts": "${{ env.timestamp }}"
              }
            ]
          }